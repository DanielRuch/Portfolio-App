{"version":3,"sources":["Resources/Images/pandas-project-fantasy.png","Resources/Components/navBarMain.js","Pages/Home.js","Pages/Sample.js","Resources/components.js","Pages/Portfolio.js","Resources/Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBarMain","props","useState","isOpen","setIsOpen","Navbar","className","color","light","expand","NavbarBrand","style","backgroundColor","border","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","Home","Jumbotron","Container","Row","Col","to","Button","tag","size","target","Sample","CardA","Card","CardImg","top","width","src","img_src","alt","img_alt","CardBody","CardTitle","title","CardSubtitle","subtitle","CardText","text","Portfolio","md","imgPandas","Main","exact","path","component","Signup","App","toggle","bind","state","this","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fce82770.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pandas-project-fantasy.bb6f60d3.png\";","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText\r\n} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../../index.css';\r\n\r\nconst NavBarMain = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      {/* Setup Navbar General Format */}\r\n      <Navbar className=\"pl-0 sticky-top bg-dark py-0\" color=\"light\" light expand=\"md\">\r\n        {/* Navbar Brand (Logo &/or name) */}\r\n        <NavbarBrand className=\"p-3\" style={{backgroundColor : \"darkblue\", color : \"white\", border : \"1px solid grey\"}} href=\"/\">Daniel Ruch</NavbarBrand>\r\n        {/* Toggler to condense Navbar items */}\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            {/* Resume Nav Item (works like a button) */}\r\n            <NavItem>\r\n              <NavLink style={{color: \"white\"}} href=\"/components/\">Resume</NavLink>\r\n            </NavItem>\r\n            {/* GitHub Nav Item*/}\r\n            <NavItem>\r\n              <NavLink style={{color: \"white\"}} href=\"https://www.github.com/DanielRuch\">GitHub</NavLink>\r\n            </NavItem>\r\n            {/* Create Uncontrolled Dropdown Menu */}\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret style={{color: \"white\"}}>\r\n                Connect\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem href=\"https://www.linkedin.com/in/daniel-ruch/\">\r\n                  <i className=\"icon-linkedin\"/>\r\n                  LinkedIn\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  Option 2\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  Reset\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n          <NavbarText style={{color: \"white\"}}>Simple Text</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBarMain;","import React from 'react';\r\nimport { Jumbotron, Button, Row, Col, Container } from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <h1>The Right Tool for the Right Job</h1>\r\n                    <p> View the full Project Catalog </p>\r\n                    <Link to=\"/Portfolio\">\r\n                        <Button\r\n                            tag=\"a\"\r\n                            color=\"success\"\r\n                            size=\"large\"\r\n                            href=\"../../index.html\"\r\n                            target=\"_blank\"\r\n                        >\r\n                            Project Catalog >>\r\n                        </Button>\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Jumbotron, Button, Row, Col, Container } from 'reactstrap';\r\n\r\nconst Sample = (props) => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <h1>SAMPLE MCSAMPLEFACE</h1>\r\n                    <p>\r\n                        <Button\r\n                            tag=\"a\"\r\n                            color=\"success\"\r\n                            size=\"large\"\r\n                            href=\"http://reactstrap.github.io\"\r\n                            target=\"_blank\"\r\n                        >\r\n                            THE BEST SAMPLE IN THE WORLD\r\n                        </Button>\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sample;","import React from 'react';\r\nimport {\r\n  Card, CardImg, CardText, CardBody,\r\n  CardTitle, CardSubtitle, Button\r\n} from 'reactstrap';\r\n{/* Card Component - Template A \r\nCard with Image, Title, Subtitle, Text, and Button */}\r\nconst CardA = (props) => {\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <CardImg top width=\"100%\" src={props.img_src} alt={props.img_alt} />\r\n          <CardBody>\r\n            <CardTitle>{props.title}</CardTitle>\r\n            <CardSubtitle>{props.subtitle}</CardSubtitle>\r\n            <CardText>{props.text}</CardText>\r\n            <Button>Button</Button>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default CardA;","import CardA from \"../Resources/components\"\r\nimport React from 'react';\r\nimport {Row, Col, Container} from 'reactstrap'\r\nimport imgPandas from '../Resources/Images/pandas-project-fantasy.png';\r\n\r\nconst Portfolio = (props) => {\r\n    return (\r\n        <Row> \r\n            <Col md=\"4\">\r\n                <Container>\r\n                    <CardA className=\"mx-auto d-flex h-100\" title=\"VBA Project\" subtitle=\"Test 1\" img_alt=\"image\" img_src={imgPandas}/>\r\n                </Container>\r\n            </Col>\r\n            <Col md=\"4\">\r\n                <Container>\r\n                    <CardA className=\"mx-auto d-flex h-100\" title=\"Python Project\" subtitle=\"Test 2\" img_alt=\"image\" img_src={imgPandas}/>\r\n                </Container>\r\n            </Col>\r\n        </Row>\r\n        \r\n    )\r\n    }\r\n\r\nexport default Portfolio;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Home from '../../Pages/Home';\r\nimport Signup from '../../Pages/Sample';\r\nimport Portfolio from '../../Pages/Portfolio'\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/' component={Home}></Route>\r\n      <Route exact path='/sample' component={Signup}></Route>\r\n      <Route exact path='/portfolio' component={Portfolio}></Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default Main;","import React, { Component , useState } from 'react';\nimport NavBarMain from './Resources/Components/navBarMain'\nimport Main from './Resources/Components/Main'\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n    \n    toggle() {\n        \n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n    render() {\n        \n        return (\n            <div>\n                <NavBarMain />\n                <Main />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(  <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}